let rec member = \elem. \list. 
        if (hd list) = # then 0 else
            if (hd list) = elem then 1 else
                member elem (tl list)
in
member 1 2:3:1:#
;;

let rec remove = \elem. \list. 
        if (tl list) = # then (hd list) else
            if (hd list) = elem then (tl list) else
                (hd list) : (remove elem (tl list))
in
remove 2 1:2:3:1:2:3:#

;;

let rec sum = \list. 
    if list = # then 0 else
        (hd list) +  sum (tl list)
in
sum 1:2:3:4:#

;;


let rec prod = \list. 
    if list = # then 1 else
        (hd list) *  prod (tl list)
in
prod 1:2:3:4:#

;;


let plus_two = \x. x + 2
in
let rec map = \func. \list. if list = # then # else (func (hd list)) : (map func (tl list))
in 
map plus_two 1:2:3:4:# 

;;

let rec insert = \elem. \list.
    if list = # then (elem : list)
    else 
        if (elem) less_equal (hd list) = 1 then (elem : list) else (hd list) : (insert elem (tl list)) 
in 
let rec sort = \func. \list.
    if list = # then # else (func (hd list) (sort func (tl list)))
in
sort insert 1:2:3:1:2:3:#

;;
